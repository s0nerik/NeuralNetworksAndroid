/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.5
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include "NetworkTrainer.h"
#include "LearningResult.h"


#include <stdexcept>


#include <vector>
#include <stdexcept>

SWIGINTERN std::vector< unsigned int >::const_reference std_vector_Sl_unsigned_SS_int_Sg__get(std::vector< unsigned int > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg__set(std::vector< unsigned int > *self,int i,std::vector< unsigned int >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< double >::const_reference std_vector_Sl_double_Sg__get(std::vector< double > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_double_Sg__set(std::vector< double > *self,int i,std::vector< double >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::vector< double > >::const_reference std_vector_Sl_std_vector_Sl_double_Sg__Sg__get(std::vector< std::vector< double > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__set(std::vector< std::vector< double > > *self,int i,std::vector< std::vector< double > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_new_1VectorOfUnsigned_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< unsigned int > *)new std::vector< unsigned int >();
  *(std::vector< unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_new_1VectorOfUnsigned_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< unsigned int >::size_type arg1 ;
  std::vector< unsigned int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< unsigned int >::size_type)jarg1; 
  result = (std::vector< unsigned int > *)new std::vector< unsigned int >(arg1);
  *(std::vector< unsigned int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_VectorOfUnsigned_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned int > **)&jarg1; 
  result = ((std::vector< unsigned int > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_VectorOfUnsigned_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned int > **)&jarg1; 
  result = ((std::vector< unsigned int > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_VectorOfUnsigned_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned int > **)&jarg1; 
  arg2 = (std::vector< unsigned int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_VectorOfUnsigned_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned int > **)&jarg1; 
  result = (bool)((std::vector< unsigned int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_VectorOfUnsigned_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_VectorOfUnsigned_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::value_type *arg2 = 0 ;
  std::vector< unsigned int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned int > **)&jarg1; 
  temp2 = (std::vector< unsigned int >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< unsigned int >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_VectorOfUnsigned_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;
  std::vector< unsigned int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned int > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< unsigned int >::value_type *) &std_vector_Sl_unsigned_SS_int_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jlong)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_VectorOfUnsigned_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  int arg2 ;
  std::vector< unsigned int >::value_type *arg3 = 0 ;
  std::vector< unsigned int >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< unsigned int > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< unsigned int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_unsigned_SS_int_Sg__set(arg1,arg2,(unsigned int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_delete_1VectorOfUnsigned(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< unsigned int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_new_1VectorOfDouble_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< double > *)new std::vector< double >();
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_new_1VectorOfDouble_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< double >::size_type arg1 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< double >::size_type)jarg1; 
  result = (std::vector< double > *)new std::vector< double >(arg1);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_VectorOfDouble_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  result = ((std::vector< double > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_VectorOfDouble_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  result = ((std::vector< double > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_VectorOfDouble_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (std::vector< double >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_VectorOfDouble_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  result = (bool)((std::vector< double > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_VectorOfDouble_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_VectorOfDouble_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  std::vector< double >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  temp2 = (std::vector< double >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< double >::value_type const &)*arg2);
}


SWIGEXPORT jdouble JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_VectorOfDouble_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jdouble)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_VectorOfDouble_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  std::vector< double >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< double >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_double_Sg__set(arg1,arg2,(double const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_delete_1VectorOfDouble(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< double > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_new_1VectorOfVectorOfDouble_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::vector< double > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >();
  *(std::vector< std::vector< double > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_new_1VectorOfVectorOfDouble_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::vector< double > >::size_type arg1 ;
  std::vector< std::vector< double > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::vector< double > >::size_type)jarg1; 
  result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >(arg1);
  *(std::vector< std::vector< double > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_VectorOfVectorOfDouble_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< double > > **)&jarg1; 
  result = ((std::vector< std::vector< double > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_VectorOfVectorOfDouble_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< double > > **)&jarg1; 
  result = ((std::vector< std::vector< double > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_VectorOfVectorOfDouble_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< double > > **)&jarg1; 
  arg2 = (std::vector< std::vector< double > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_VectorOfVectorOfDouble_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< double > > **)&jarg1; 
  result = (bool)((std::vector< std::vector< double > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_VectorOfVectorOfDouble_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< double > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_VectorOfVectorOfDouble_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::vector< double > > **)&jarg1; 
  arg2 = *(std::vector< std::vector< double > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< double > >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< std::vector< double > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_VectorOfVectorOfDouble_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< double > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< double > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::vector< double > >::value_type *) &std_vector_Sl_std_vector_Sl_double_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::vector< double > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_VectorOfVectorOfDouble_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< double > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::vector< double > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::vector< double > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< double > >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg__set(arg1,arg2,(std::vector< double > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_delete_1VectorOfVectorOfDouble(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::vector< double > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_NetworkTrainer_1trainNetwork_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jint jarg5, jdouble jarg6, jdouble jarg7, jdouble jarg8) {
  jlong jresult = 0 ;
  NetworkTrainer *arg1 = (NetworkTrainer *) 0 ;
  std::vector< unsigned int > *arg2 = 0 ;
  std::vector< std::vector< double > > *arg3 = 0 ;
  std::vector< std::vector< double > > *arg4 = 0 ;
  int arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  LearningResult result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(NetworkTrainer **)&jarg1; 
  arg2 = *(std::vector< unsigned int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned int > & reference is null");
    return 0;
  } 
  arg3 = *(std::vector< std::vector< double > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< double > > & reference is null");
    return 0;
  } 
  arg4 = *(std::vector< std::vector< double > > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< double > > & reference is null");
    return 0;
  } 
  arg5 = (int)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  result = (arg1)->trainNetwork(*arg2,*arg3,*arg4,arg5,arg6,arg7,arg8);
  *(LearningResult **)&jresult = new LearningResult((const LearningResult &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_NetworkTrainer_1trainNetwork_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jint jarg5, jdouble jarg6, jdouble jarg7) {
  jlong jresult = 0 ;
  NetworkTrainer *arg1 = (NetworkTrainer *) 0 ;
  std::vector< unsigned int > *arg2 = 0 ;
  std::vector< std::vector< double > > *arg3 = 0 ;
  std::vector< std::vector< double > > *arg4 = 0 ;
  int arg5 ;
  double arg6 ;
  double arg7 ;
  LearningResult result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(NetworkTrainer **)&jarg1; 
  arg2 = *(std::vector< unsigned int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned int > & reference is null");
    return 0;
  } 
  arg3 = *(std::vector< std::vector< double > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< double > > & reference is null");
    return 0;
  } 
  arg4 = *(std::vector< std::vector< double > > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< double > > & reference is null");
    return 0;
  } 
  arg5 = (int)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  result = (arg1)->trainNetwork(*arg2,*arg3,*arg4,arg5,arg6,arg7);
  *(LearningResult **)&jresult = new LearningResult((const LearningResult &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_NetworkTrainer_1trainNetwork_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jint jarg5, jdouble jarg6) {
  jlong jresult = 0 ;
  NetworkTrainer *arg1 = (NetworkTrainer *) 0 ;
  std::vector< unsigned int > *arg2 = 0 ;
  std::vector< std::vector< double > > *arg3 = 0 ;
  std::vector< std::vector< double > > *arg4 = 0 ;
  int arg5 ;
  double arg6 ;
  LearningResult result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(NetworkTrainer **)&jarg1; 
  arg2 = *(std::vector< unsigned int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned int > & reference is null");
    return 0;
  } 
  arg3 = *(std::vector< std::vector< double > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< double > > & reference is null");
    return 0;
  } 
  arg4 = *(std::vector< std::vector< double > > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< double > > & reference is null");
    return 0;
  } 
  arg5 = (int)jarg5; 
  arg6 = (double)jarg6; 
  result = (arg1)->trainNetwork(*arg2,*arg3,*arg4,arg5,arg6);
  *(LearningResult **)&jresult = new LearningResult((const LearningResult &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_new_1NetworkTrainer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  NetworkTrainer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (NetworkTrainer *)new NetworkTrainer();
  *(NetworkTrainer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_delete_1NetworkTrainer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  NetworkTrainer *arg1 = (NetworkTrainer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NetworkTrainer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_LearningResult_1trainingSetOutputs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  LearningResult *arg1 = (LearningResult *) 0 ;
  std::vector< std::vector< double > > *arg2 = (std::vector< std::vector< double > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(LearningResult **)&jarg1; 
  arg2 = *(std::vector< std::vector< double > > **)&jarg2; 
  if (arg1) (arg1)->trainingSetOutputs = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_LearningResult_1trainingSetOutputs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LearningResult *arg1 = (LearningResult *) 0 ;
  std::vector< std::vector< double > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LearningResult **)&jarg1; 
  result = (std::vector< std::vector< double > > *)& ((arg1)->trainingSetOutputs);
  *(std::vector< std::vector< double > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_LearningResult_1epochsPassed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  LearningResult *arg1 = (LearningResult *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LearningResult **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->epochsPassed = arg2;
}


SWIGEXPORT jint JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_LearningResult_1epochsPassed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  LearningResult *arg1 = (LearningResult *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LearningResult **)&jarg1; 
  result = (int) ((arg1)->epochsPassed);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_LearningResult_1averageError_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  LearningResult *arg1 = (LearningResult *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LearningResult **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->averageError = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_LearningResult_1averageError_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  LearningResult *arg1 = (LearningResult *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LearningResult **)&jarg1; 
  result = (double) ((arg1)->averageError);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_new_1LearningResult(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  LearningResult *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (LearningResult *)new LearningResult();
  *(LearningResult **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_sonerik_neuralnetworksandroid_ndk_neural_1networkJNI_delete_1LearningResult(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  LearningResult *arg1 = (LearningResult *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(LearningResult **)&jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

